/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;
import controller.CelularController;
import controller.CelularVendaController;
import controller.VendasController;
import java.awt.Color;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Venda;

/**
 *
 * @author renato
 */
public class VendasView extends javax.swing.JInternalFrame {
    NumberFormat formatter = new DecimalFormat("#0.00");
    private VendasController vv;
    private CelularController cc;
    private CelularVendaController cvc;
    private static int index = 0;
    private static int id = 0;
    private SimpleDateFormat spf = new SimpleDateFormat("dd/MM/yyyy");
    
    
    public VendasView() throws Exception {
        vv = new VendasController();
        cc = new CelularController();
        initComponents();
        vv.getVendas();
        
        setCelular(vv.getCelular());
        
        if(vv.primeiroPasso() == 0){
            desativarButtonC();
        }else{
            cvc = new CelularVendaController(vv.getVendas().get(index).getId());
            exibirDados();    
        }
       
    }
    public VendasController getUc() {
        return vv;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        buttonSalvar = new javax.swing.JButton();
        buttonInicioT2 = new javax.swing.JButton();
        buttonProximo2 = new javax.swing.JButton();
        buttonFinalT2 = new javax.swing.JButton();
        buttonAnterior2 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        inputId = new javax.swing.JTextField();
        buttonSelecionar = new javax.swing.JButton();
        buttonExcluir = new javax.swing.JButton();
        buttonEditar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbDados = new javax.swing.JTable();
        buttonVenda = new javax.swing.JToggleButton();
        inputCliente = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        inputValor = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        inputSituacao = new javax.swing.JTextField();
        inputQnt = new javax.swing.JTextField();
        jComboBoxCelular = new javax.swing.JComboBox();
        buttonAdicionar = new javax.swing.JButton();
        buttonRemover = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel23 = new javax.swing.JLabel();
        inputData = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        inputValorTotalVenda = new javax.swing.JTextField();
        buttonCancelar = new javax.swing.JToggleButton();

        setClosable(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusTraversalPolicyProvider(true);

        jLabel11.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Venda de Celulares");

        jLabel12.setText("Celular:");

        buttonSalvar.setText("Novo");
        buttonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSalvarActionPerformed(evt);
            }
        });

        buttonInicioT2.setText("|<");
        buttonInicioT2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInicioTActionPerformed(evt);
            }
        });

        buttonProximo2.setText(">>");
        buttonProximo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonProximoActionPerformed(evt);
            }
        });

        buttonFinalT2.setText(">|");
        buttonFinalT2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFinalTActionPerformed(evt);
            }
        });

        buttonAnterior2.setText("<<");
        buttonAnterior2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAnteriorActionPerformed(evt);
            }
        });

        jLabel17.setText("Valor:");

        jLabel18.setText("ID:");

        buttonSelecionar.setText("Selecionar");
        buttonSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelecionarActionPerformed(evt);
            }
        });

        buttonExcluir.setText("Excluir");
        buttonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExcluirActionPerformed(evt);
            }
        });

        buttonEditar.setText("Editar");
        buttonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditarActionPerformed(evt);
            }
        });

        tbDados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód. Barras", "Celular", "Preço", "Qnt."
            }
        ));
        jScrollPane1.setViewportView(tbDados);

        buttonVenda.setBackground(new java.awt.Color(11, 124, 3));
        buttonVenda.setForeground(new java.awt.Color(255, 255, 255));
        buttonVenda.setText("Efetuar Venda");
        buttonVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVendaActionPerformed(evt);
            }
        });

        jLabel20.setText("Cliente:");

        jLabel21.setText("Quantidade:");

        jLabel22.setText("Situação:");

        jComboBoxCelular.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--selecionar--" }));
        jComboBoxCelular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCelularActionPerformed(evt);
            }
        });

        buttonAdicionar.setText("Adicionar");
        buttonAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAdicionarActionPerformed(evt);
            }
        });

        buttonRemover.setText("Remover");
        buttonRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoverActionPerformed(evt);
            }
        });

        jLabel23.setText("Data da venda:");

        inputData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputDataActionPerformed(evt);
            }
        });

        jLabel24.setText("Valor total da venda:");

        buttonCancelar.setBackground(new java.awt.Color(204, 0, 0));
        buttonCancelar.setForeground(new java.awt.Color(255, 255, 255));
        buttonCancelar.setText("Cancelar Venda");
        buttonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(buttonRemover)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonAdicionar)))
                        .addGap(346, 346, 346))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxCelular, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(18, 18, 18)
                                .addComponent(inputValor, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(inputQnt, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel18))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(inputId)
                                        .addGap(149, 149, 149)
                                        .addComponent(jLabel22)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(inputSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(inputCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel23)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(inputData, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jSeparator1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonInicioT2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(buttonEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonAnterior2)))
                            .addComponent(buttonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonSelecionar)
                                    .addComponent(buttonProximo2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(buttonExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonFinalT2)))
                            .addComponent(buttonVenda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(358, 358, 358))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputValorTotalVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inputData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inputCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel20)))
                .addGap(13, 13, 13)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jComboBoxCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(inputValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(inputQnt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputValorTotalVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonProximo2)
                    .addComponent(buttonAnterior2)
                    .addComponent(buttonInicioT2)
                    .addComponent(buttonFinalT2))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSelecionar)
                    .addComponent(buttonEditar)
                    .addComponent(buttonSalvar)
                    .addComponent(buttonExcluir))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jComboBoxCelular.getAccessibleContext().setAccessibleDescription("");
        jComboBoxCelular.getAccessibleContext().setAccessibleParent(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 404, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditarActionPerformed
        
        if(buttonEditar.getText().equals("Salvar")){
        if(!inputCliente.getText().equals("")){
        try {
               buttonEditar.setText("Editar");
                vv.atualizarVenda(Integer.parseInt(inputId.getText()),inputCliente.getText());
                ativarButton();
                exibirDados();
        } catch (Exception ex) {
                
            JOptionPane.showMessageDialog(rootPane, "Impossivel editar venda", "Aviso", JOptionPane.ERROR_MESSAGE, null);
//        
        }
        }else{
            JOptionPane.showMessageDialog(rootPane, "Campos invalidos", "Aviso", JOptionPane.ERROR_MESSAGE, null);
//        
        }
        }else{
            if(inputSituacao.getText().equals("FECHADO")){
                         
            JOptionPane.showMessageDialog(rootPane, "Impossivel editar venda finalizada", "Aviso", JOptionPane.ERROR_MESSAGE, null);
        
            }else{
                buttonEditar.setText("Salvar");
                desativarButtonE();
                desativarTudo();
                inputCliente.setEnabled(true);
            }
        }
        
    }//GEN-LAST:event_buttonEditarActionPerformed

    private void buttonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExcluirActionPerformed

        try {
            if(inputSituacao.getText().equals("FECHADO")){
                      
            JOptionPane.showMessageDialog(rootPane, "Impossivel excluir venda finalizada", "Aviso", JOptionPane.ERROR_MESSAGE, null);
        
            }else{
                int resposta = JOptionPane.showConfirmDialog(null, "Deseja realmente excluir?", "excluir", JOptionPane.YES_NO_OPTION);

                if (resposta == JOptionPane.YES_OPTION) {
                cvc = new CelularVendaController(vv.getVendas().get(index).getId());
                for(int i=0; i<cvc.getCelularVendaVendas().size(); i++){
                    String desc = cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getDescricao();
                    int valorQT = cvc.recuperaQnt(desc) + cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getQuantidade_vendida_registro();
                
                     int valorQR = cvc.recuperaQntReservada(desc) - cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getQuantidade_vendida_registro();
                 
                    cvc.updateQntR(desc, valorQR);
                }
                vv.removeVenda(Integer.parseInt(inputId.getText()));
                limparCampos();
                vv = new VendasController();
                index = vv.getVendas().size()-1;
                exibirDados();
            }else{ }
            }
            } catch (Exception ex) {
                    
            JOptionPane.showMessageDialog(rootPane, "Falha ao tentar excluir", "Aviso", JOptionPane.ERROR_MESSAGE, null);
            try {
                if(vv.primeiroPasso() == 0){
                    desativarButtonC();
                }else{
                    cvc = new CelularVendaController(vv.getVendas().get(index).getId());    
                    exibirDados();
                }
            } catch (Exception ex1) {
                Logger.getLogger(VendasView.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        
    }//GEN-LAST:event_buttonExcluirActionPerformed

    private void buttonSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelecionarActionPerformed
       
        if(buttonSelecionar.getText().equals("Buscar")){
        try {
            Venda venda;
            int i = 0;
            int id = Integer.parseInt(inputId.getText());
            Iterator iterator = vv.getVendas().iterator();
            do{
                if(id == vv.getVendas().get(i).getId()){
                    index=i;
                }
                iterator.next();
                if(i<vv.getVendas().size()-1)
                    i++;
                
            }while (iterator.hasNext());
            
            limparCampos();
            buttonSelecionar.setEnabled(true);
            buttonSalvar.setEnabled(true);
            buttonExcluir.setEnabled(true);
            buttonEditar.setEnabled(true);
            ativarButton();
            exibirDados();
            buttonSelecionar.setText("Selecionar");
        } catch (Exception ex) {
            
                JOptionPane.showMessageDialog(null, "ID inexistente", "Erro", 0);
        }
        }else{
            desativarButtonB();
            inputId.setEnabled(true);
            inputId.setEditable(true);
            buttonSelecionar.setText("Buscar");
        }
        
    }//GEN-LAST:event_buttonSelecionarActionPerformed

    private void buttonAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAnteriorActionPerformed
        if(index > 0){
            anterior();
        }
        try {
            exibirDados();
        } catch (Exception ex) {
            Logger.getLogger(VendasView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonAnteriorActionPerformed

    private void buttonFinalTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFinalTActionPerformed
        index = vv.getVendas().size()-1;
        try {
            exibirDados();
        } catch (Exception ex) {
            Logger.getLogger(VendasView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonFinalTActionPerformed

    private void buttonProximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonProximoActionPerformed

        if(index < vv.getVendas().size()-1){
            posterior();
        }
        try {
            exibirDados();
        } catch (Exception ex) {
            Logger.getLogger(VendasView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonProximoActionPerformed

    private void buttonInicioTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInicioTActionPerformed
        index = 0;
        try {
            exibirDados();
        } catch (Exception ex) {
            Logger.getLogger(VendasView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonInicioTActionPerformed

    private void buttonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSalvarActionPerformed
        
        if(buttonSalvar.getText().equals("Salvar")){
            if(!inputCliente.getText().equals("")){
                    Date data = new Date();
                try {
                    inputCliente.setEnabled(true);
                    vv.novo(inputCliente.getText(), data, "ABERTO");
                    vv= new VendasController();
                    index = vv.getVendas().size()-1;
                    exibirDados();
                    buttonSalvar.setText("Novo");
                    ativarButton();

                    this.exibirDados();

                } catch (Exception ex) {

                    JOptionPane.showMessageDialog(rootPane, "Campo Invalido", "Aviso", JOptionPane.ERROR_MESSAGE, null);
        //        
                }
            }else{
                JOptionPane.showMessageDialog(rootPane, "Campo Invalido", "Aviso", JOptionPane.ERROR_MESSAGE, null);
        //        
            }
        }else{
            limparCampos();
            inputValorTotalVenda.setText("0.00");
            buttonSalvar.setText("Salvar");
            desativarButtonC();
            inputCliente.setEnabled(true);
        }
    }//GEN-LAST:event_buttonSalvarActionPerformed

    private void jComboBoxCelularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCelularActionPerformed
        try {
            cc.buscaValor((String) jComboBoxCelular.getSelectedItem());
            inputValor.setText(""+formatter.format(cc.buscaValor((String) jComboBoxCelular.getSelectedItem())).replace(",", "."));
            inputQnt.setText(""+1);
        } catch (SQLException ex) {
            Logger.getLogger(VendasView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jComboBoxCelularActionPerformed

    private void buttonAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAdicionarActionPerformed
        try {
            int qnt = 0;
            int id_c = cvc.recuperaIdC((String) jComboBoxCelular.getSelectedItem());
            if((cvc.recuperaQntReservada((String) jComboBoxCelular.getSelectedItem())+Integer.parseInt(inputQnt.getText()))>cvc.recuperaQnt((String) jComboBoxCelular.getSelectedItem())){
                
                JOptionPane.showMessageDialog(rootPane, "Não é possivel adicionar o celular com essa quantidade, pois ultrapassa a quantia em estoque!\nEstoque atual: "+cvc.recuperaQnt((String) jComboBoxCelular.getSelectedItem()), "EVITAR ESTOQUE NEGATIVO", JOptionPane.ERROR_MESSAGE, null);
                
            
            }else{
            cvc.novo((String) jComboBoxCelular.getSelectedItem(),Integer.parseInt(inputQnt.getText()),
                        Integer.parseInt(inputId.getText()),Double.parseDouble(inputValor.getText()),id_c,Integer.parseInt(inputQnt.getText()));
            qnt = (cvc.recuperaQnt( (String) jComboBoxCelular.getSelectedItem()))- (Integer.parseInt(inputQnt.getText()));
            qnt = cvc.recuperaQntT(Integer.parseInt(inputId.getText()),id_c);
            qnt = cvc.recuperaQntTParaVendaDesc((String) jComboBoxCelular.getSelectedItem());
            cvc.updateQntR((String) jComboBoxCelular.getSelectedItem(), qnt);
            double valorTotalSomado;
            valorTotalSomado = (Double.parseDouble(inputValor.getText())*Integer.parseInt(inputQnt.getText()));
            
            vv.updateValorTotalSomado(Integer.parseInt(inputId.getText()),valorTotalSomado+vv.retornaValorTotal(Integer.parseInt(inputId.getText())));
            preencherTabela();
            this.exibirDados();
            }
        }catch(Exception ex) {
//            Logger.getLogger(CadastroUsuarioView.class.getName()).log(Level.SEVERE, null, ex);
         
            JOptionPane.showMessageDialog(rootPane, "Informe os dados Corretamente", "Aviso", JOptionPane.ERROR_MESSAGE, null);
        
        }
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(rootPane, "Adicione os dados da venda antes", "AVISO", JOptionPane.ERROR_MESSAGE, null);    
//        }
        
    }//GEN-LAST:event_buttonAdicionarActionPerformed

    private void buttonRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoverActionPerformed
        
        try {
            int novoReservado;
            cvc.retornaDescSelecionada(valorCollun());
            
            double valorTotalDiminuido;
            valorTotalDiminuido = (Double.parseDouble(inputValorTotalVenda.getText())) - (cvc.recuperaValor(valorCollun())*cvc.recuperaQntId(valorCollun()));
            cvc.mandaValor(valorTotalDiminuido);
            
            novoReservado = (cvc.QntReservadoAtual(cvc.retornaDescSelecionada(valorCollun()))) - (cvc.recuperaQntId(valorCollun()));
            cvc.removeCelularVenda(valorCollun(),cvc.retornaDescSelecionada(valorCollun()),novoReservado,Integer.parseInt(inputId.getText()));
            
            this.exibirDados();
        } catch (Exception ex) {
                
            JOptionPane.showMessageDialog(rootPane, "Primeiro selecione um item da venda", "Aviso", JOptionPane.ERROR_MESSAGE, null);
//        
        }
        
    }//GEN-LAST:event_buttonRemoverActionPerformed

    
    
    private void buttonVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVendaActionPerformed
        
        try {
            int novoReservado;
            
           // novoReservado = (cvc.QntReservadoAtual(cvc.retornaDescSelecionada(valorCollun()))) - (cvc.recuperaQntId(valorCollun()));
            
            
            
            int i=0;
            int valorQT;
            int valorQR;
            int valorQvendida;
            while(i<cvc.findAllPagar(Integer.parseInt(inputId.getText())).size()){
                String desc = cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getDescricao();
                int id = cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getId();
                valorQT = cvc.recuperaQnt(desc) - cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getQuantidade_vendida();
                
                valorQR = cvc.recuperaQntReservada(desc) - cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getQuantidade_vendida();
                 
                valorQvendida = cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getQuantidade_vendida()-cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getQuantidade_vendida();
                cvc.updateQntVendida(cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getId(), valorQvendida);
                cvc.updateQntR(desc, valorQR);
                cvc.updateQntT(desc, valorQT);
                vv.updateSituacao("FECHADO",Integer.parseInt(inputId.getText()));
                inputSituacao.setText("FECHADO");   
                inputSituacao.setForeground(Color.red);
                i++;
                
            }
            if(i!=0){
                Date d = new Date();
                vv.updateData(d,Integer.parseInt(inputId.getText()));
                vv = new VendasController();
                inputData.setText(spf.format(vv.getVendas().get(index).getData()));
                this.desativarTudo();
                buttonCancelar.setEnabled(true);
                buttonVenda.setEnabled(false);

                JOptionPane.showMessageDialog(rootPane, "Venda realizada com sucesso", "Sucesso", JOptionPane.INFORMATION_MESSAGE, null);
            }else{
                JOptionPane.showMessageDialog(rootPane, "Necessário primeiro adicionar Itens", "Aviso", JOptionPane.ERROR_MESSAGE, null);
        
            }
        } catch (SQLException ex) {
                     
            JOptionPane.showMessageDialog(rootPane, "Impossivel realizar venda", "Aviso", JOptionPane.ERROR_MESSAGE, null);
        
        } catch (Exception ex) {
            
                  
            JOptionPane.showMessageDialog(rootPane, "Impossivel realizar venda", "Aviso", JOptionPane.ERROR_MESSAGE, null);
//        
//            Logger.getLogger(VendasView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }//GEN-LAST:event_buttonVendaActionPerformed

    private void inputDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputDataActionPerformed

    private void buttonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarActionPerformed
        
        
        int resposta = JOptionPane.showConfirmDialog(null, "Deseja realmente cancelar essa venda?", "Cancelamento", JOptionPane.YES_NO_OPTION);

        if (resposta == JOptionPane.YES_OPTION) {
            
             try {
            int novoReservado;
            
           // novoReservado = (cvc.QntReservadoAtual(cvc.retornaDescSelecionada(valorCollun()))) - (cvc.recuperaQntId(valorCollun()));
            
            
            
            int i=0;
            int novaQuantidade;
            int valorQR;
            int valorQvendida;
            int valorQT;
            while(i<cvc.findAllPagar(Integer.parseInt(inputId.getText())).size()){
                
                
                
                
                String desc = cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getDescricao();
                int id = cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getId();
                novaQuantidade = cvc.recuperaQntRegistro(cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getId());
                System.out.println("Nova Quantidade::: "+ cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getQuantidade_vendida_registro());
                
                valorQT = cvc.recuperaQnt(desc) + cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getQuantidade_vendida_registro();
                
                valorQR = cvc.recuperaQntReservada(desc) + cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getQuantidade_vendida_registro();
                 
                valorQvendida = cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getQuantidade_vendida_registro();
                cvc.updateQntVendida(cvc.findAllPagar(Integer.parseInt(inputId.getText())).get(i).getId(), valorQvendida);
                cvc.updateQntR(desc, valorQR);
                cvc.updateQntT(desc, valorQT);
                vv.updateSituacao("ABERTO",Integer.parseInt(inputId.getText()));
                inputSituacao.setText("ABERTO");   
                inputSituacao.setForeground(Color.green);
                  i++;
                
            }
        }catch(Exception ex){
            Logger.getLogger(VendasView.class.getName()).log(Level.SEVERE, null, ex);
        }
            Date d = new Date();
        try {
            vv.updateData(d,Integer.parseInt(inputId.getText()));
            vv = new VendasController();
            inputData.setText(spf.format(vv.getVendas().get(index).getData()));
            this.ativarTudo();
            buttonCancelar.setEnabled(false);
            buttonVenda.setEnabled(true);
            JOptionPane.showMessageDialog(rootPane, "Venda cancelada com sucesso", "Sucesso", JOptionPane.INFORMATION_MESSAGE, null);
        
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Impossivel realizar Cancelamento", "Aviso", JOptionPane.ERROR_MESSAGE, null);
        }
            
            
        } else{
            
        }
        
        
        
       
            
 
        
    }//GEN-LAST:event_buttonCancelarActionPerformed

    
   public int valorCollun(){
        int row = tbDados.getSelectedRow();
        Object value = null;
        String converteValueString = "";
        int id;
         if (row > -1) { //então tem ítem selecionado
             value = tbDados.getValueAt(row, 0);
         }
         converteValueString = ""+value;
         id = Integer.parseInt(converteValueString);
         return id;
   }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdicionar;
    private javax.swing.JButton buttonAnterior2;
    private javax.swing.JToggleButton buttonCancelar;
    private javax.swing.JButton buttonEditar;
    private javax.swing.JButton buttonExcluir;
    private javax.swing.JButton buttonFinalT2;
    private javax.swing.JButton buttonInicioT2;
    private javax.swing.JButton buttonProximo2;
    private javax.swing.JButton buttonRemover;
    private javax.swing.JButton buttonSalvar;
    private javax.swing.JButton buttonSelecionar;
    private javax.swing.JToggleButton buttonVenda;
    private javax.swing.JTextField inputCliente;
    private javax.swing.JTextField inputData;
    private javax.swing.JTextField inputId;
    private javax.swing.JTextField inputQnt;
    private javax.swing.JTextField inputSituacao;
    private javax.swing.JTextField inputValor;
    private javax.swing.JTextField inputValorTotalVenda;
    private javax.swing.JComboBox jComboBoxCelular;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tbDados;
    // End of variables declaration//GEN-END:variables

    public int anterior(){
        return --index;
    }
    public int posterior(){
        return ++index;
    }
    
    private void setCelular(List<String> celular){
        while(!celular.isEmpty()){
            jComboBoxCelular.addItem(celular.remove(0));
        }
    }
    
    public void exibirDados() throws Exception{
       limparCampos();
       preencherTabela();
       vv   = new VendasController();
       cc = new CelularController();
       inputCliente.setText(vv.getVendas().get(index).getCliente());
      // inputSerie.setText(vv.buscaSerie((String) jComboBoxCelular.getSelectedItem()));
       //String serie = inputSerie.getText();
       //inputId.setText(""+vv.getId(serie));
       inputId.setText(""+vv.getVendas().get(index).getId());
       //inputValor.setText(""+vv.getVendas().get(index).getPreco());
       inputSituacao.setText(vv.getVendas().get(index).getSituacao());
       
       inputValorTotalVenda.setText(""+formatter.format(vv.getVendas().get(index).getValorTotal()).replace(",", "."));
       
       inputData.setText(spf.format(vv.getVendas().get(index).getData()));
       inputValorTotalVenda.setEnabled(true);
       inputValorTotalVenda.setEditable(false);
       inputSituacao.setEditable(false);
       inputId.setEnabled(true);
       inputId.setEditable(false);
       
        if(inputSituacao.getText().equals("ABERTO")){
            inputSituacao.setForeground(Color.green);
            this.ativarTudo();
            buttonCancelar.setEnabled(false);
            buttonVenda.setEnabled(true);
        }else{
            this.desativarTudo();
            inputSituacao.setForeground(Color.red);
            buttonCancelar.setEnabled(true);
            buttonVenda.setEnabled(false);
        }
       
   }
    
    public void limparCampos(){
        inputCliente.setText("");
    }
    
//    public void desativar(){
//        inputId.setEnabled(false);
//        inputCliente.setEnabled(false);
//        inputSituacao.setEnabled(false);
//        inputSerie.setEnabled(false);
//    }
//    public void ativarCad(){
//        inputId.setEnabled(false);
//        inputCliente.setEnabled(true);
//        inputSituacao.setEnabled(true);
//        inputSerie.setEnabled(true);
//        inputValor.setEnabled(false);
//        inputQnt.setEnabled(false);
//        jComboBoxCelular.setEnabled(false);
//    }
//    
//    public void ativar(){
//        this.desativar();
//        inputValor.setEnabled(true);
//        inputQnt.setEnabled(true);
//        jComboBoxCelular.setEnabled(true);
//    }
    public void desativarTudo(){
        inputValor.setEnabled(false);
        inputData.setEnabled(false);
        inputQnt.setEnabled(false);
        jComboBoxCelular.setEnabled(false);
        inputCliente.setEnabled(false);
        inputSituacao.setEditable(false);
        buttonAdicionar.setEnabled(false);
        buttonVenda.setEnabled(false);
        buttonRemover.setEnabled(false);
    }
    
    public void ativarTudo(){
        inputValor.setEnabled(true);
        inputQnt.setEnabled(true);
        jComboBoxCelular.setEnabled(true);
        inputCliente.setEnabled(false);
        inputSituacao.setEditable(false);
        inputData.setEditable(false);
        inputData.setEnabled(false);
        buttonAdicionar.setEnabled(true);
        buttonVenda.setEnabled(true);
        buttonRemover.setEnabled(true);
    }
    
    public void desativarButtonC(){
        inputData.setEnabled(false);
        inputId.setEnabled(false);
        inputQnt.setEnabled(false);
        jComboBoxCelular.setEnabled(false);
        inputValor.setEnabled(false);
        inputValorTotalVenda.setEnabled(false);
        inputSituacao.setEnabled(true);
        inputSituacao.setEditable(false);
        inputCliente.setEnabled(false);
        buttonVenda.setEnabled(false);
        buttonCancelar.setEnabled(false);
        buttonInicioT2.setEnabled(false);
        buttonFinalT2.setEnabled(false);
        buttonProximo2.setEnabled(false);
        buttonAnterior2.setEnabled(false);
        buttonAdicionar.setEnabled(false);
        buttonRemover.setEnabled(false);
        buttonSelecionar.setEnabled(false);
        buttonSalvar.setEnabled(true);
        buttonExcluir.setEnabled(false);
        buttonEditar.setEnabled(false);
    }
    public void desativarButtonE(){
        inputData.setEnabled(false);
        inputId.setEnabled(false);
        inputQnt.setEnabled(false);
        jComboBoxCelular.setEnabled(false);
        inputValor.setEnabled(false);
        inputValorTotalVenda.setEnabled(false);
        inputSituacao.setEnabled(false);
        inputCliente.setEnabled(false);
        buttonVenda.setEnabled(false);
        buttonCancelar.setEnabled(false);
        buttonInicioT2.setEnabled(false);
        buttonFinalT2.setEnabled(false);
        buttonProximo2.setEnabled(false);
        buttonAnterior2.setEnabled(false);
        buttonAdicionar.setEnabled(false);
        buttonRemover.setEnabled(false);
        buttonSelecionar.setEnabled(false);
        buttonSalvar.setEnabled(false);
        buttonExcluir.setEnabled(false);
        buttonEditar.setEnabled(true);
    }
    
    public void desativarButtonB(){
        inputData.setEnabled(false);
        inputId.setEnabled(false);
        inputQnt.setEnabled(false);
        jComboBoxCelular.setEnabled(false);
        inputValor.setEnabled(false);
        inputValorTotalVenda.setEnabled(false);
        inputSituacao.setEditable(false);
        inputCliente.setEnabled(false);
        buttonVenda.setEnabled(false);
        buttonCancelar.setEnabled(false);
        buttonInicioT2.setEnabled(false);
        buttonFinalT2.setEnabled(false);
        buttonProximo2.setEnabled(false);
        buttonAnterior2.setEnabled(false);
        buttonAdicionar.setEnabled(false);
        buttonRemover.setEnabled(false);
        buttonSelecionar.setEnabled(true);
        buttonSalvar.setEnabled(false);
        buttonExcluir.setEnabled(false);
        buttonEditar.setEnabled(false);
    }
    
    public void ativarButton(){
        buttonVenda.setEnabled(true);
        buttonSelecionar.setEnabled(true);
        buttonSalvar.setEnabled(true);
        buttonExcluir.setEnabled(true);
        buttonEditar.setEnabled(true);
        buttonAnterior2.setEnabled(true);
        buttonProximo2.setEnabled(true);
        buttonFinalT2.setEnabled(true);
        buttonInicioT2.setEnabled(true);
    }
    
    
    
    public void preencherTabela() throws Exception{
        cvc = new CelularVendaController(vv.getVendas().get(index).getId());
        DefaultTableModel modelo = (DefaultTableModel)tbDados.getModel();
        modelo.setNumRows(0);
        
        tbDados.getColumnModel().getColumn(0).setPreferredWidth(10);//largura das colunas
        tbDados.getColumnModel().getColumn(1).setPreferredWidth(60);
        tbDados.getColumnModel().getColumn(2).setPreferredWidth(20);
        tbDados.getColumnModel().getColumn(3).setPreferredWidth(20);
        for(int i=0; i<cvc.getCelularVendaVendas().size(); i++){
            modelo.addRow(new Object[]{
             cvc.getCelularVendaVendas().get(i).getId(),
             cvc.getCelularVendaVendas().get(i).getDescricao(),
             cvc.getCelularVendaVendas().get(i).getValor(),
             cvc.getCelularVendaVendas().get(i).getQuantidade_vendida_registro()
             });
        }
        
    }
    
    
    
}
